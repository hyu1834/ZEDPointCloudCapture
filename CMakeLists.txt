CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT(ZED_PCC-0.0.1)

if(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 OLD)
	cmake_policy(SET CMP0015 OLD)
endif(COMMAND cmake_policy)

#Add Compile options
ADD_COMPILE_OPTIONS(-std=c++11 -fPIC -lusb-1.0 -lpthread)

#Find Package
FIND_PACKAGE(Qt5 REQUIRED COMPONENTS Widgets Core Test Concurrent)
FIND_PACKAGE(PCL 1.7.1 REQUIRED)
IF(NOT "${PCL_LIBRARIES}" STREQUAL "")
	LIST(REMOVE_ITEM PCL_LIBRARIES "vtkproj4")
ENDIF()
FIND_PACKAGE(ZED 2.0 REQUIRED)
#FIND_PACKAGE(OpenGL REQUIRED)
#FIND_PACKAGE(GLUT REQUIRED)
# FIND_PACKAGE(Threads REQUIRED)
#FIND_PACKAGE(PkgConfig REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)
FIND_PACKAGE(CUDA ${VERSION_REQ_CUDA} REQUIRED)


#Include Directories
INCLUDE_DIRECTORIES(${PCL_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Eigen_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${OpenGL_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${GLUT_INCLUDE_DIRS})

#INCLUDE_DIRECTORIES("/usr/local/include/librealsense/")
#INCLUDE_DIRECTORIES(${realsense_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${LIBUSB_1_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${GLFW_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${ZED_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})

#Link Libraries
LINK_DIRECTORIES(${PCL_LIBRARY_DIRS})
#LINK_DIRECTORIES(${GLUT_LIBRARY_DIRS})
#LINK_DIRECTORIES(${OpenGL_LIBRARY_DIRS})
#LINK_DIRECTORIES(${GLEW_LIBRARY_DIR})
LINK_DIRECTORIES(${OpenCV_LIBRARY_DIRS})
LINK_DIRECTORIES(${ZED_LIBRARY_DIR})
LINK_DIRECTORIES(${CUDA_LIBRARY_DIRS})

# Add Libraries Definition
ADD_DEFINITIONS(${QT_DEFINITIONS})
ADD_DEFINITIONS(${PCL_DEFINITIONS})
#ADD_DEFINITIONS(${OpenGL_DEFINITIONS})
ADD_DEFINITIONS(-std=c++0x)
ADD_DEFINITIONS(-Wno-write-strings)

#Package check
#PKG_CHECK_MODULES(PC_LIBUSB REQUIRED libusb-1.0)

#Package Search
#PKG_SEARCH_MODULE(GLFW REQUIRED glfw3)

# Set compilation flags
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O3" ) # Release Perf mode
SET(VERSION_REQ_OCV "3.1")
SET(SPECIAL_OS_LIBS "")
SET(VERSION_REQ_CUDA "8.0")
SET(SPECIAL_OS_LIBS "pthread" "X11")

# Get All Header Files
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include/)
FILE(GLOB_RECURSE project_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")

# Get All Source Files
FILE(GLOB_RECURSE project_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")

# Get ALL forms files
FILE(GLOB_RECURSE project_FORMS "${CMAKE_CURRENT_SOURCE_DIR}/forms/*.ui")

# SET(project_FORMS "${CMAKE_CURRENT_SOURCE_DIR}/forms/mainwindow.ui")

QT5_WRAP_CPP(project_HEADERS_MOC ${project_HEADERS})
QT5_WRAP_UI(project_FORMS_HEADERS ${project_FORMS})

##For Jetson, OpenCV4Tegra is based on OpenCV2.4
EXEC_PROGRAM(uname ARGS -p OUTPUT_VARIABLE CMAKE_SYSTEM_NAME2)
IF(CMAKE_SYSTEM_NAME2 MATCHES "aarch64" )
	SET(VERSION_REQ_OCV "2.4")
	SET(VERSION_REQ_CUDA "")
	LINK_DIRECTORIES("/usr/lib/aarch64-linux-gnu/tegra") ## on Jetson TX1 64bits, the correct libGL.so is located here (the default one will lead to linking error (undef ref))

	UNSET(CUDA_USE_STATIC_CUDA_RUNTIME CACHE)
	OPTION(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
	SET(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
	MESSAGE("CUDA_USE_STATIC_CUDA_RUNTIME : ${CUDA_USE_STATIC_CUDA_RUNTIME}")
	##to prevent from opencv_dep_cudart dependencies error...
	## cmake with -DCUDA_USE_STATIC_CUDA_RUNTIME=false can also be called.
	
ENDIF()


ADD_EXECUTABLE(ZEDPCC ${project_SOURCES} ${project_HEADERS_MOC} ${project_FORMS_HEADERS})

TARGET_LINK_LIBRARIES(ZEDPCC
					  ${Qt5_LIBRARIES} 
					  ${PCL_LIBRARIES}
					  #${OPENGL_LIBRARIES}
					  #${GLUT_LIBRARY}
					  ${OpenCV_LIBRARIES}
					  #${LIBREALSENSE}
					  #${GLEW_LIBRARY}
					  #${GLFW_LIBRARIES}
					  # ${CMAKE_THREAD_LIBS_INIT}
			${SPECIAL_OS_LIBS}
			${ZED_LIBRARIES}
			${CUDA_CUDA_LIBRARY} 
			${CUDA_CUDART_LIBRARY} 
			${CUDA_npp_LIBRARY}
                        ${SPECIAL_OS_LIBS}
					  )
